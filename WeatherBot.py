from pyowm import OWM
from pyowm.utils.config import get_default_config

import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from geopy.geocoders import Nominatim

from datetime import datetime

from config import OWM_KEY, TG_KEY, db_connect_old

config_dict = get_default_config()
config_dict['language'] = 'ru'
owm = OWM(api_key=OWM_KEY)
mgr = owm.weather_manager() # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –ø–æ–≥–æ–¥—É

bot = Bot(token=TG_KEY) # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
dp = Dispatcher(bot)

current_time = '12:00'
last_message = ''

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    mess = '–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –ê—Ä—Ç—ë–º–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É'
    username = message.from_user.username
    chat_id = message.chat.id
    print(chat_id)

    conn = db_connect_old()
    await bot.send_message(chat_id=chat_id, text=mess)
    
    if conn.check_user(chat_id):
        mess = '–¢—ã —É–∂–µ –∏–º–µ–µ—à—å –∑–¥–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç!\n–ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /settings'
        await bot.send_message(chat_id=chat_id, text=mess)
    else:
        mess = '–ö–∞–∫ —è –≤–∏–∂—É, —Ä–∞–Ω—å—à–µ —Ç—ã –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–Ω–æ–π.\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ç–æ–≥–æ –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥'
        conn.add_user(username=username, chat_id=chat_id)
        del conn
        await add_city(message, chat_id, mess)

@dp.message_handler(commands=['settings'])
async def settings(message: types.Message):
    chat_id = message.chat.id
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.row(KeyboardButton("–ì–æ—Ä–æ–¥ üèôÔ∏è", request_location=True), KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ"))
    await bot.send_message(text='–í–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', chat_id=chat_id, reply_markup=reply_markup)

@dp.message_handler(content_types=ContentType.LOCATION)
async def handle_location(message: types.Message):
    global last_message
    conn = db_connect_old()
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    latitude = message.location.latitude
    longitude = message.location.longitude
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
    geolocator = Nominatim(user_agent="your_app_name")
    location = geolocator.reverse(f"{latitude}, {longitude}")
    city = location.raw['address']['city']
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É —Å chat_id 
    conn.add_city_by_chatId(city, message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply_markup = types.ReplyKeyboardRemove()
    await message.reply(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: "+ city, reply_markup=reply_markup)
    
    time_search = conn.search_user_in_times(chat_id=chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º—ë–Ω –≤ –ë–î. 
    print(time_search, type(time_search))
    if time_search.count(':') == 0:
        # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—É—Å—Ç—ã–µ
        mess = '–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É?\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É –¥–≤–∞ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ —Å —à–∞–≥–æ–º –≤ 30 –º–∏–Ω—É—Ç'
        await add_time(message, chat_id, mess)
        
    elif time_search.count(':') == 1:
        # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ 1 –∑–∞–ø–∏—Å—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        mess = '–ö—Å—Ç–∞—Ç–∏.\n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –ø–æ–≥–æ–¥—É, —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n–ù–µ —Ö–æ—á–µ—à—å –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –≤—Ä–µ–º—è?'
        markup_request = ReplyKeyboardMarkup(resize_keyboard=True)
        markup_request.row(KeyboardButton('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ'), KeyboardButton('–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –≤—Ä–µ–º—è!'))
        await bot.send_message(chat_id=chat_id, text=mess, reply_markup=markup_request)
    elif time_search.count(':') >= 2:
        print(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {chat_id} —É–∂–µ –∑–∞–±–∏—Ç–æ')

    del conn

@dp.message_handler()
async def process_message(message: types.Message):
    global current_time
    global last_message
    last_message = message.text
    chat_id = message.chat.id
    prev_time = current_time

    conn = db_connect_old() # –°–æ–µ–¥–∏–Ω—è–µ–º —Å –ë–î #

    if message.text == "‚¨ÖÔ∏è":
        # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        current_time = change_time(current_time, '-')
    elif message.text == "‚û°Ô∏è":
        # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        current_time = change_time(current_time, '+')

    elif len(message.text) == 5 and ':' in message.text and '0' in message.text:
        if 'üïõ ' in message.text: # –ù–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è #
            time = message.text.replace('üïõ', '').strip()
            print('–ò—â–µ–º –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥:', time)
            

        result = conn.search_user_in_times(chat_id=chat_id)
        if result.count(':') >= 2: # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å 2 –∑–∞–ø–∏—Å–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            er_mess = f"–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É –±–æ–ª—å—à–µ 2—Ö —Ä–∞–∑\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–≥–æ–¥—É –≤ {result[0]['time']} –∏ –≤ {result[1]['time']}"
            await message.reply(text=er_mess)

        else:
            # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
            add_time_res = await conn.add_time_by_chatId(chat_id, message.text)
            result = conn.search_user_in_times(chat_id=chat_id)
            if add_time_res:
                print('–°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏')
                current_time = '12:00'
                print('–î–ª–∏–Ω–∞', result, len(result))
                if 'None' not in str(result):
                    print('–£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
                    reply_markup = types.ReplyKeyboardRemove()
                else:
                    print('–í—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
                    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    reply_markup.row(KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton(current_time), KeyboardButton("‚û°Ô∏è"))
                
                await bot.send_message(chat_id, '–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=reply_markup)  
                return
            else:
                await bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞, –∫–∞–∫–∞—è-—Ç–æ –±–µ–¥–∞\n–ù–∞–ø–∏—à–∏ –ê—Ä—Ç—ë–º—É (@Mukhachan_dev)')

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        await bot.delete_message(chat_id=chat_id, message_id=last_message.message_id)
        current_time = '12:00'
        return
    elif message.text == '–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –≤—Ä–µ–º—è!':
        message.reply('–•–æ—Ä–æ—à–æ')
        await add_time(message, chat_id)
        return

    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ': 
        mess = '–í–æ—Ç —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–ù–∞–∂–º–∏ –Ω–∞ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å'
        add_time(message=message, chat_id=chat_id, mess=mess, pref=True)

    if prev_time != current_time:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        mess = last_message
        await add_time(message, chat_id, mess)

        # last_message = await bot.send_message(chat_id, mess, reply_markup=keyboard)
        # await bot.delete_message(chat_id=chat_id, message_id=last_message.message_id-1)


# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ #
async def add_time(message: types.Message, chat_id: int, mess: str = '–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:', pref: bool = False, change: bool = False):
    """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤—ã–±–æ—Ä –í–†–ï–ú–ï–ù–ò
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if pref:
        res = db_connect_old().search_user_in_times(message.chat.id)
        first_time = res[0]['time']
        second_button = res[1]['time']
        keyboard.row(KeyboardButton('üïõ '+ first_time), KeyboardButton(second_button + ' üïõ'))

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row(KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton(current_time), KeyboardButton("‚û°Ô∏è"))

    keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    last_message = await bot.send_message(chat_id, mess, reply_markup=keyboard)
    await bot.delete_message(chat_id=chat_id, message_id=last_message.message_id-1)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ—Ä–æ–¥–∞ #
async def add_city(message: types.Message, chat_id: int, mess: str = '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:'):
    """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ì–û–†–û–î–ê
    """
    markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add( KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
    await bot.send_message(chat_id=chat_id, text=mess, reply_markup=markup_request)

def change_time(time_str, side: str):
    hours, minutes = map(int, time_str.split(":"))
    total_minutes = hours * 60 + minutes    
    if side == '+':
        new_time = (total_minutes + 30) % (24 * 60)
    elif side == '-':
        new_time = (total_minutes - 30) % (24 * 60)
    return "{:02d}:{:02d}".format(new_time // 60, new_time % 60)


# async def shedule_handler():
#     while True:
#         now = datetime.now().strftime("%H:%M")
#         print(f'\r{now}', end='')
#         await asyncio.sleep(60)

#         if now in TIMES:                
#             try:
#                 observation = mgr.weather_at_place('–ú–æ—Å–∫–≤–∞,RU')
#                 w = observation.weather

#                 text = f"{datetime.now().strftime('%H:%M %d/%m/%Y')}\n–°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ: {int(w.temperature('celsius')['temp'])}¬∞\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {int(w.temperature('celsius')['feels_like'])}¬∞\n–ü–æ–≥–æ–¥–∞: {w.detailed_status}"
#                 print('\n–û–¢–ü–†–ê–í–õ–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:')
#                 print(text, '\n')

#                 sent_message = await bot.send_message(chat_id=ARTEMS_CHAT, text=text)
#                 await bot.delete_message(chat_id=ARTEMS_CHAT, message_id=sent_message.message_id - 1)
#                 with open('log.txt', 'w') as f:
#                     f.write(now + ' - sent')    

#             except Exception as e:
#                 text = '–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: '+ e
#                 print(text)
#                 sent_message = await bot.send_message(chat_id=ARTEMS_CHAT, text=text)
#                 await bot.delete_message(chat_id=ARTEMS_CHAT, message_id=sent_message.message_id - 1)


def get_weather_cache():
    # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    weather_cache = {}
    cities = []
    for i in db_connect_old().get_cities(): # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –ë–î
        cities.append(i['city'])
    cities = set(cities)

    for city in cities: # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º
        observation = mgr.weather_at_place(city)
        w = observation.weather
        weather_cache[city] = w
    
    return cities, weather_cache

async def shedule_handler():
    cache_response = get_weather_cache()
    cities = cache_response[0]
    weather_cache = cache_response[1]
    while True:
        now = datetime.now().strftime("%H:%M")
        print(f'\r{now}', end='')      
        await asyncio.sleep(120) # –ñ–¥—ë–º 2 –º–∏–Ω—É—Ç—ã
        for city in cities: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥–∞
            people_list = db_connect_old().search_by_city_and_nowtime(city) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É
            for person in people_list: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π #
                if person['city'] not in weather_cache: # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏ –µ–¥–µ–º –¥–∞–ª—å—à–µ
                    cache_response = get_weather_cache()
                    cities = cache_response[0]
                    weather_cache = cache_response[1]

                w = weather_cache[person['city']]
                chat_id = people_list['chat_id']

                text = f"{datetime.now().strftime('%H:%M %d/%m/%Y')}\n–°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ: {int(w.temperature('celsius')['temp'])}¬∞\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {int(w.temperature('celsius')['feels_like'])}¬∞\n–ü–æ–≥–æ–¥–∞: {w.detailed_status}"
                print('\n–û–¢–ü–†–ê–í–õ–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:')
                print(text, '\n')

                sent_message = await bot.send_message(chat_id=chat_id, text=text)
                await bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id - 1)

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n')

    loop = asyncio.get_event_loop()
    loop.create_task(shedule_handler())
    loop.create_task(executor.start_polling(dp, skip_updates=True))