import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils.exceptions import BotBlocked

import requests

from datetime import datetime

from config import TG_KEY, headers, db_connect_old

bot = Bot(token=TG_KEY) # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
dp = Dispatcher(bot)

current_time = '12:00'
last_message = ''

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    mess = '–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –ê—Ä—Ç—ë–º–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É'
    username = message.from_user.username
    chat_id = message.chat.id
    print(chat_id)

    conn = db_connect_old()
    await bot.send_message(chat_id=chat_id, text=mess)
    if conn.check_user(chat_id):
        mess = '–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω!)\n–ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /settings'
        await bot.send_message(chat_id=chat_id, text=mess)
        await bot.send_message(chat_id=chat_id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        conn.change_sending(chat_id, 'True')
    else:
        mess = '–ö–∞–∫ —è –≤–∏–∂—É, —Ä–∞–Ω—å—à–µ —Ç—ã –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–Ω–æ–π.\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ç–æ–≥–æ –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥'
        conn.add_user(username=username, chat_id=chat_id)
        
        del conn
        await add_city(message, chat_id, mess)

@dp.message_handler(commands=['settings'])
async def settings(message: types.Message):
    chat_id = message.chat.id
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.row(KeyboardButton("–ì–æ—Ä–æ–¥ üèôÔ∏è", request_location=True), KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ"))
    await bot.send_message(text='–í–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', chat_id=chat_id, reply_markup=reply_markup)

@dp.message_handler(content_types=ContentType.LOCATION)
async def handle_location(message: types.Message):
    global last_message
    conn = db_connect_old()
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    latitude = str(message.location.latitude)[:6]
    longitude = str(message.location.longitude)[:6]
    print(latitude, longitude)
    params = {
        'latitude': latitude,
        'longitude': longitude,
        'limit': 1
    }
    try: 
        r = requests.get('https://api.gismeteo.net/v2/search/cities/', params=params, headers=headers)
        print(r.url)
        response = r.json()['response'][0]
        city = response['id']
        city_name = response['district']['nameP']
    except Exception:
        print('–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Å–∞–º—ã–π –±–ª–∏–∑–∂–∞–π—à–∏–π –æ—Ç —Ç–µ–±—è –≥–æ—Ä–æ–¥')
        await message.reply('–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Å–∞–º—ã–π –±–ª–∏–∑–∂–∞–π—à–∏–π –æ—Ç —Ç–µ–±—è –≥–æ—Ä–æ–¥')

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É —Å chat_id 
    conn.add_city_by_chatId(city, message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply_markup = types.ReplyKeyboardRemove()
    await message.reply(f"–¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥: "+ response['district']['name'], reply_markup=reply_markup)
    
    time_search = conn.search_user_in_times(chat_id=chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º—ë–Ω –≤ –ë–î. 
    print(time_search, type(time_search))
    if str(time_search).count('datetime.timedelta') == 0:
        # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—É—Å—Ç—ã–µ
        mess = '–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É?\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É –¥–≤–∞ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ —Å —à–∞–≥–æ–º –≤ 30 –º–∏–Ω—É—Ç'
        await add_time(message, chat_id, mess)
        
    elif time_search.count(':') == 1:
        # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ 1 –∑–∞–ø–∏—Å—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        mess = '–ö—Å—Ç–∞—Ç–∏.\n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –ø–æ–≥–æ–¥—É, —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n–ù–µ —Ö–æ—á–µ—à—å –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –≤—Ä–µ–º—è?'
        markup_request = ReplyKeyboardMarkup(resize_keyboard=True)
        markup_request.row(KeyboardButton('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ'), KeyboardButton('–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –≤—Ä–µ–º—è!'))
        await bot.send_message(chat_id=chat_id, text=mess, reply_markup=markup_request)
    elif time_search.count(':') >= 2:
        print(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {chat_id} —É–∂–µ –∑–∞–±–∏—Ç–æ')

    del conn, r

@dp.message_handler()
async def process_message(message: types.Message):
    global current_time
    global last_message
    last_message = message.text
    chat_id = message.chat.id
    prev_time = current_time

    conn = db_connect_old() # –°–æ–µ–¥–∏–Ω—è–µ–º —Å –ë–î #

    if message.text == "‚¨ÖÔ∏è":
        # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        current_time = change_time(current_time, '-')
    elif message.text == "‚û°Ô∏è":
        # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        current_time = change_time(current_time, '+')

     
     # –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç 5 –¥–æ 7 —Å–∏–º–≤–æ–≤ #  –í —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è :  #  –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª '0'
    elif 5 <= len(message.text) <= 7 and ':' in message.text or 'üïõ None' in message.text:
        print('–ü–æ–ª—É—á–∏–ª –≤—Ä–µ–º—è')
        if message.text[-2] not in ('0', '3', 'n') and 'üïõ' not in message.text:
            await bot.send_message(chat_id=chat_id, text='–¢—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —Å —à–∞–≥–æ–º –≤ 30 –º–∏–Ω—É—Ç\n–ö –ø—Ä–∏–º–µ—Ä—É: 12:00, 12:30, 13:00 –∏ —Ç.–¥.')
            return
        
        print('[INFO] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è')
        if 'üïõ' in message.text: # –ù–∞–¥–æ –∏–∑–º\\–µ–Ω–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è #
            print('–ó–∞—à–ª–∏ –≤ —É—Å–ª–æ–≤–∏–µ')
            time = message.text.replace('üïõ', '').strip()
            print('[INFO] –ò—â–µ–º –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥:', time)
            await conn.search_by_ChatId_and_time(chat_id=chat_id, time=time)
            await add_time(message, chat_id, '–ü—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:')
            return

        result = conn.search_user_in_times(chat_id=chat_id)
        if result.count(':') >= 2: # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å 2 –∑–∞–ø–∏—Å–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            er_mess = f"–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É –±–æ–ª—å—à–µ 2—Ö —Ä–∞–∑\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–≥–æ–¥—É –≤ {result[0]['time']} –∏ –≤ {result[1]['time']}"
            await message.reply(text=er_mess)

        else:
            db_connect_old().change_log(f"–ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
            add_time_res = await conn.add_time_by_chatId(chat_id, message.text)
            result = conn.search_user_in_times(chat_id=chat_id)
            if add_time_res:
                print('–°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏')
                current_time = '12:00'
                print('–î–ª–∏–Ω–∞', result, len(result))
                if 'None' not in str(result):
                    print('–£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
                    reply_markup = types.ReplyKeyboardRemove()
                else:
                    print('–í—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
                    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    reply_markup.row(KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton(current_time), KeyboardButton("‚û°Ô∏è"))
                
                await bot.send_message(chat_id, '–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=reply_markup)  
                return
            else:
                await bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞, –∫–∞–∫–∞—è-—Ç–æ –±–µ–¥–∞\n–ù–∞–ø–∏—à–∏ –ê—Ä—Ç—ë–º—É (@Mukhachan_dev)')
    elif message.text == 'chat_id':
        await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        # await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        await message.reply('–•–æ—Ä–æ—à–æ. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —è –≤—Ä—è–¥ –ª–∏ —Å–ø—Ä—è—á—É, –Ω–æ –¥–æ–ø–µ–∫–∞—Ç—å –Ω–µ –±—É–¥—É')
        # await bot.delete_message(chat_id=chat_id, message_id=last_message.message_id)
        current_time = '12:00'
        return
    elif message.text == '–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –≤—Ä–µ–º—è!':
        message.reply('–•–æ—Ä–æ—à–æ')
        await add_time(message, chat_id)
        return
    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ': 
        print('[INFO] –ü—Ä–∏–Ω—Ç—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        mess = '–í–æ—Ç —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–ù–∞–∂–º–∏ –Ω–∞ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å'
        await add_time(message=message, chat_id=chat_id, mess=mess, pref=True)
    elif '—Å–ø–∞—Å–∏–±–æ' in message.text.lower():
        await bot.send_message(chat_id=chat_id, text='–û–±—Ä–∞—â–∞–π—Å—è!)')

    if prev_time != current_time:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        mess = last_message
        await add_time(message, chat_id, mess)


# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ #
async def add_time(message: types.Message, chat_id: int, mess: str = '–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:', pref: str = False, change: bool = False):
    """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤—ã–±–æ—Ä –í–†–ï–ú–ï–ù–ò
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if pref:
        res = db_connect_old().search_user_in_times(message.chat.id)
        first_time = str(res[0]['time'])[:-3] if res[0]['time'] != None else 'None'
        second_time = str(res[1]['time'])[:-3] if res[1]['time'] != None else 'None'
        print(f'[INFO] –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –≤—Ä–µ–º—è {first_time} –∏ {second_time}')
        keyboard.row(KeyboardButton(f'üïõ {first_time}'), KeyboardButton(f'{second_time} üïõ'))

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row(KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton(current_time), KeyboardButton("‚û°Ô∏è"))

    keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    last_message = await bot.send_message(chat_id, mess, reply_markup=keyboard)
    # await bot.delete_message(chat_id=chat_id, message_id=last_message.message_id-1)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ—Ä–æ–¥–∞ #
async def add_city(message: types.Message, chat_id: int, mess: str = '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:'):
    """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ì–û–†–û–î–ê
    """
    markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add( KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
    await bot.send_message(chat_id=chat_id, text=mess, reply_markup=markup_request)

def change_time(time_str, side: str):
    hours, minutes = map(int, time_str.split(":"))
    total_minutes = hours * 60 + minutes    
    if side == '+':
        new_time = (total_minutes + 30) % (24 * 60)
    elif side == '-':
        new_time = (total_minutes - 30) % (24 * 60)
    return "{:02d}:{:02d}".format(new_time // 60, new_time % 60)

def get_weather_cache():
    print('–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ GISMETEO –∑–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    db_connect_old().change_log('–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ GISMETEO –∑–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    weather_cache = {}
    cities = []

    for i in db_connect_old().get_cities(): # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –ë–î
        cities.append(i['city'])
    cities = set(cities)
    print (cities)
    for city in cities: # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º
        try:
            r = requests.get(f'https://api.gismeteo.net/v2/weather/current/{city}/', headers=headers)
            weather_cache[city] = r.json()['response']

        except Exception as e:
            print(f'–° –ø–æ–≥–æ–¥–æ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')
            db_connect_old().change_log(f'–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}')
            weather_cache[city] = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
    
    del r
    return cities, weather_cache

async def shedule_handler():
    cache_response = get_weather_cache()
    cities = cache_response[0]
    weather_cache = cache_response[1]
    weather_cache['last_update'] = datetime.now()
    
    while True:
        now = datetime.now().strftime("%H:%M")
        print(f'\r{now}', end='')      
        await asyncio.sleep(60) # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É

        for city in cities: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥–∞
            people_list = db_connect_old().search_by_city_and_nowtime(city) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É
            for person in people_list: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π #
                print(person)
                if person['city'] not in weather_cache or (datetime.now() - weather_cache['last_update']).total_seconds()/60 > 6*60: # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏ –µ–¥–µ–º –¥–∞–ª—å—à–µ
                    cache_response = get_weather_cache()
                    cities = cache_response[0]
                    weather_cache = cache_response[1]
                    weather_cache['last_update'] = datetime.now()

                w = weather_cache[person['city']]
                chat_id = person['chat_id']
                if w == '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω':
                    text = f"{datetime.now().strftime('%H:%M %d/%m/%Y')}\n–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª –±–ª–∏–∑–∂–∞–π—à–∏–π –æ—Ç —Å–µ–±—è –≥–æ—Ä–æ–¥\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–µ–æ–ø–æ–∑–∏—Ü—É—é –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —è –≤—Å—ë –æ—Ç–ø—Ä–∞–≤–ª—é)"
                else:
                    humidity = w['humidity']['percent']
                    description = w['description']['full']
                    temperature = w['temperature']['air']['C']
                    cloudiness = w['cloudiness']['percent']
                    precipitation = w['precipitation']
                    
                    precipitation_emo = ['‚òÄÔ∏è –Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤', 'üåßÔ∏è –¥–æ–∂–¥–∏–∫', 'üå®Ô∏è—Å–Ω–µ–≥', '—Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏']
                    intensity_emo = ['–Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤', '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å –∏–ª–∏ —Å–Ω–µ–≥', '–¥–æ–∂–¥—å –∏–ª–∏ —Å–Ω–µ–≥', '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –∏–ª–∏ —Å–Ω–µ–≥']
                    x = cloudiness
                    smile = "üå§Ô∏è" if x <= 20 else "‚õÖÔ∏è" if x <= 50 else "üå•Ô∏è" if x <= 75 else "‚òÅÔ∏è"

                    text = f"{datetime.now().strftime('%H:%M %d/%m/%Y')}\n–°–µ–π—á–∞—Å üå°Ô∏è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ: {temperature}¬∞\n",\
                    f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n",\
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n",\
                    f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudiness}% {smile}\n",\
                    f"–û—Å–∞–¥–∫–∏:\n",\
                    f"    –¢–∏–ø: {precipitation['type']}/3 - {precipitation_emo[int(precipitation['type'])]}\n",\
                    f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {precipitation['amount'] if not 'None' else '0'}–º–º\n",\
                    f"    –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {precipitation['intensity']}/3 - {intensity_emo[int(precipitation['intensity'])]}\n"
                    text = "".join(text)
                    ### text = f"{datetime.now().strftime('%H:%M %d/%m/%Y')}\n–°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {person['city']}: {int(w.temperature('celsius')['temp'])}¬∞\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {int(w.temperature('celsius')['feels_like'])}¬∞\n–ü–æ–≥–æ–¥–∞: {w.detailed_status}\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {w.clouds}%"

                print('–û–¢–ü–†–ê–í–õ–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:')
                print(text, '\n')
                try:
                    sent_message = await bot.send_message(chat_id=chat_id, text=text)
                    # await bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id - 1)
                except BotBlocked:
                    conn = db_connect_old()
                    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª')
                    conn.change_log(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª')
                    conn.change_sending(chat_id=chat_id, text='False')
                    del conn

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n')

    loop = asyncio.get_event_loop()
    loop.create_task(shedule_handler())
    loop.create_task(executor.start_polling(dp, skip_updates=True))